name: release build

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      sign: ${{ steps.check.outputs.sign }}
      version: ${{ steps.gradle-version.outputs.version }}
    steps:
      - id: check
        run: |
          if [ ! -z "${{ secrets.RELEASE_KEY_STORE }}" ]; then
            echo "sign=yes" >> $GITHUB_OUTPUT
          fi
      - id: gradle-version
        run: |
          echo "version=$(date -d "8 hour" -u +1.%y.%m%d%H)" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    if: ${{ needs.prepare.outputs.sign }}
    strategy:
      matrix:
        product: [ app ]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      product: ${{ matrix.product }}
      version: ${{ needs.prepare.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Release Apk Sign
        run: |
          echo storeFile='./key.jks' >> gradle.properties
          echo keyAlias ='${{ secrets.RELEASE_KEY_ALIAS }}' >> gradle.properties
          echo keyPassword ='${{ secrets.RELEASE_KEY_PASSWORD }}' >> gradle.properties
          echo storePassword ='${{ secrets.RELEASE_STORE_PASSWORD }}' >> gradle.properties
          echo ${{ secrets.RELEASE_KEY_STORE }} | base64 --decode > $GITHUB_WORKSPACE/app/key.jks

      - name: Unify Version Name
        run: |
          echo "统一版本号"
          sed "/def version/c def version = \"${{ env.version }}\"" $GITHUB_WORKSPACE/app/build.gradle  -i

      - name: Set up Gradle
        uses: gradle/gradle-build-action@v2

      - name: Build With Gradle
        run: |
          echo "开始进行${{ env.product }}构建"
          chmod +x gradlew
          ./gradlew assemble${{ env.product }}release --build-cache --parallel --daemon --warning-mode all

      - name: Organize the Files
        run: |
          mkdir -p ${{ github.workspace }}/apk/
          cp -rf ${{ github.workspace }}/app/build/outputs/apk/*/*/*.apk ${{ github.workspace }}/apk/

      - name: Upload App To Artifact
        uses: actions/upload-artifact@v3
        with:
          name: tsv_${{ env.product }}
          path: ${{ github.workspace }}/apk/*.apk

      - name: Release
        if: ${{ env.product == 'app' }}
        uses: softprops/action-gh-release@v1
        with:
          name: tsv_app_${{ env.version }}
          tag_name: v${{ env.version }}
          body_path: ${{ github.workspace }}/CHANGELOG.md
          draft: false
          prerelease: false
          files: ${{ github.workspace }}/apk/TSV_app_*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Assets To "release" Branch
        if: ${{ github.actor == 'SlotSun' }}
        run: |
          cd $GITHUB_WORKSPACE/apk/
          git init
          git checkout -b release
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git remote add origin "https://${{ github.actor }}:${{ secrets.ACTIONS_TOKEN }}@github.action/${{ github.actor }}/release"
          git add *.apk
          git commit -m "${{ env.version }}"
          git push -f -u origin release       
